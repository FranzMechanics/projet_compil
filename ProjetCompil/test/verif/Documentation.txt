Documentation sur les tests:

--------------------------------------------------------------

    --> Bien décomposer les problèmes en écrivant des méthodes COURTES.
    --> Factoriser les éléments communs (Eviter les tests testant les mêmes régles sémantiques)
    --> Il est nécessaire de documenter tous les fichiers de test
        - Documenter chaque test à l'aide d'un commentaire avant le code testé

--------------------------------------------------------------

    Les différents types de tests:

    --> Test unitaires (test d'une méthode, d'une classe)
    --> test d'intégration (teste l'intégration de plusieurs méthodes ou plusieurs classes)
    --> Tests systèmes: test du compilateur dans les conditions normales d'utilisation


    On écrira des programmes JCas valides et invalides sémantiquement.
        --> Cas valide

            - Le programme s'éxecute correctement, on vérifie que l'arbre
            est correctement décoré.

        --> Cas invalide

            - On vérifie que le message d'erreur est pertinent.

--------------------------------------------------------------

    Idées de tests à réaliser:

        - Rien n'interdit un intervalle vide                                                            -- fait
            --> tab: array[6..5] of integer
            --> i : 5..2

        - Equivalence structurelle                                                                      -- fait
            --> v1 : array[1..10] of integer ;
                m : array[1..5] of array[1..10] of integer ;
                v2 : array[1..10] of integer ;

                v1 := v2 --ok
                m[1] := v1 -- ok
                m := v1 -- Interdit


        - REGLES DE VISIBILITE

            tester les régles suivantes:
                - On ne peut pas re-déclarer un identificateur déjà déclaré                             -- fait
                    --> x : integer
                        x : array[1..10] of integer -- interdit

                - Tout identificateur apparaissant dans un programme JCas doit                          -- fait
                être déclaré, sauf les identificateurs préféfinis.
                    --> x := 5; -- interdit sans déclaration préalable

                - Les identificateurs prédéfinis ne peuvent pas être redéfinis                          -- fait
                    --> integer: boolean

            - Les identificateurs d'un programme JCas sont de différentes natures

            tester les régles suivantes:
                - Identificateurs de constantes (de type intervalle, booléen, réel ou chaine)
                - identificateurs de type
                - identificateurs de variable

            -- /!\ Reprendre diapo 11 /!\

            - La nature des identificateurs doit toujours être vérifiée                                 --fait
                --> program
                    i : integer;
                    j : i;  // Erreur contextuelle: identificateur de type attendu <!>
                    begin
                        null;
                    end.

        - VERIFICATION DE TYPE

            - Intervalles --> exp.const1..exp.const2
                avec exp.const1 et exp.const2 de type Type.Interval

            - Affectations --> place := expression
                Le type de place et d'expression sont liés par l'affectation.
                    - place et expression de type Type.Interval (pas forcément avec les mêmes bornes)
                        --> i : 1..10
                            i := 5..10

                    - place et expression de type Type.Real                                     -- fait
                    - place et expression de type Type.Boolean
                    - place de type Type.Real et expression de type Type.Interval               -- fait 
                    - place et expression de type Type.Array. Les types des indices
                    étant identiques (de type Type.Interval, avec les mêmes bornes),
                    et les types des éléments compatibles pour l'affectation
                    (Affectation entre deux tableaux de même intervalle et de même type)


            - Instruction:
                - if et while: la condition doit être de type Type.Boolean
                - for: la variable de contrôle ainsi que les deux expressions
                doivent être de type type.Interval
                - read: la place doit être de type Type.Interval ou Type.Real
                    --> program
                        n : integer
                        begin
                            write("Entrer un entier ");
                            read(n);
                        end.
                - write: Les expressions doivent être de type Type.Interval,
                Type.Real ou Type.String.
                    --> program
                        n: integer ;
                        fact: integer;
                        begin
                            write("fact(", n, ") = ", fact) ;
                            new_line;
                        end.

                - Les places et expressions doivent être bien typées vis-à-vis des déclarations
                 et des profils des opérateurs.
